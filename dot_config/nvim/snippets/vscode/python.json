{
  "drill_template": {
    "prefix": "drill_template",
    "body": [
      "\"\"\"",
      "Description:",
      "",
      "\"\"\"",
      "# Implementation foldin",
      "\"\"\"",
      "\"\"\"",
      "# foldout",
      "# Hints foldin",
      "\"\"\"",
      "\"\"\"",
      "# foldout",
      "# Mnemonic foldin",
      "\"\"\"",
      "\"\"\"",
      "# foldout",
      "class Exercise:",
      "    # TEST_CASES foldin",
      "    TEST_CASES = [",
      "        {\"name\": \"no args\", \"input\": (), \"expected_output\": \"\"},",
      "    ]",
      "    # foldout",
      "    def execute(self):",
      "        return None"
    ],
    "description": "Template for creating a new Exercise class"
  },
  "assert_false": {
    "prefix": "asf",
    "body": "self.assertFalse(${1:actual}${2:, '${3:message}'})$0"
  },
  "assert_true": {
    "prefix": "ast",
    "body": "self.assertTrue(${1:actual}${2:, '${3:message}'})$0"
  },
  "assert_equal": {
    "prefix": "ase",
    "body": "self.assertEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "assert_in": {
    "prefix": "asin",
    "body": "self.assertIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0"
  },
  "assert_is_none": {
    "prefix": "asino",
    "body": "self.assertIsNone(${1:actual}${2:, '${3:message}'})$0"
  },
  "assert_is_not_none": {
    "prefix": "asinno",
    "body": "self.assertIsNotNone(${1:actual}${2:, '${3:message}'})$0"
  },
  "assert_is_not": {
    "prefix": "asint",
    "body": "self.assertIsNot(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "assert_is": {
    "prefix": "asi",
    "body": "self.assertIs(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "assert_not_equal": {
    "prefix": "asne",
    "body": "self.assertNotEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "assert_not_in": {
    "prefix": "asni",
    "body": "self.assertNotIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0"
  },
  "assert_raises": {
    "prefix": "asr",
    "body": "self.assertRaises(${1:exception}, ${2:callable}, ${3:args})$0"
  },
  "assert": {
    "prefix": "as",
    "body": "self.assert_(${1:boolean expression}${2:, '${3:message}'})$0"
  },
  "dictionary_comprehension_if_filter": {
    "prefix": "dci",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries, with conditional if statement."
  },
  "dictionary_comprehension": {
    "prefix": "dc",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries."
  },
  "debugpy": {
    "prefix": "debugpy",
    "body": [
      "# REMOVE ME",
      "import debugpy",
      "debugpy.listen((\"0.0.0.0\", 5678))",
      "debugpy.wait_for_client()"
    ],
    "description": "adds a debugpy remote attach breakpoint"
  },
  "fail_a_test_": {
    "prefix": "fail",
    "body": "self.fail('${1:message}')$0"
  },
  "generator_comprehension_if_filter": {
    "prefix": "gci",
    "body": "(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0",
    "description": "Create a generator based on existing iterables, with condition if statement."
  },
  "generator_comprehension": {
    "prefix": "gc",
    "body": "(${1:key} for ${2:value} in ${3:iterable})$0",
    "description": "Create a generator based on existing iterables."
  },
  "list_comprehension_if_else": {
    "prefix": "lcie",
    "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists, with conditional if-else statement."
  },
  "list_comprehension_if_filter": {
    "prefix": "lci",
    "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]",
    "description": "List comprehension for creating a list based on existing lists, with conditional if statement."
  },
  "list_comprehension": {
    "prefix": "lc",
    "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists."
  },
  "new_async_function": {
    "prefix": "adef",
    "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for async function definition."
  },
  "new_class": {
    "prefix": "classi",
    "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
    "description": "Code snippet for a class definition."
  },
  "new_function_w_return": {
    "prefix": "deft",
    "body": "def ${1:fname}(${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "Code snippet for function definition."
  },
  "new_function": {
    "prefix": "def",
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for function definition."
  },
  "new_method_w_return": {
    "prefix": "defst",
    "body": "def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "Code snippet for a class method definition."
  },
  "new_method": {
    "prefix": "defs",
    "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for a class method definition."
  },
  "set_comprehension_if_filter": {
    "prefix": "sci",
    "body": "{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0",
    "description": "Create a set based on existing iterables, with condition if statement."
  },
  "set_comprehension": {
    "prefix": "sc",
    "body": "{${1:value} for ${2:value} in ${3:iterable}}$0",
    "description": "Create a set based on existing iterables."
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:classname}(${2:object}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a class definition"
  },
  "elif": {
    "prefix": "elif",
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for an elif"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "Code snippet for an else"
  },
  "for": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "Code snippet to create a for loop structure."
  },
  "for_else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else"
  },
  "from_import_": {
    "prefix": "fim",
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
  },
  "if_name_main_": {
    "prefix": "ifmain",
    "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
    "description": "Create implicitly all the code at the top level using the __name__ special variable."
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet for the if statement."
  },
  "if_else": {
    "prefix": "if/else",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for an if statement with else"
  },
  "import": {
    "prefix": "im",
    "body": "import ${1:package/module}$0",
    "description": "Import a package or module"
  },
  "self": {
    "prefix": "s",
    "body": "self.$0",
    "description": "Shortend snippet to reference the self property in an object."
  },
  "try_except_": {
    "prefix": "try",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "Code Snippet for a try and except blocks."
  },
  "try_except_else": {
    "prefix": "trye",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except with else statement."
  },
  "try_except_else_finally": {
    "prefix": "tryef",
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "Code Snippet for a try/except/finally with else statement."
  },
  "try_except_finally": {
    "prefix": "tryf",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except/finally."
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet to create a while loop structure."
  },
  "while/else": {
    "prefix": "while/else",
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a while loop with else"
  },
  "with": {
    "prefix": "with",
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a with statement"
  }
}
