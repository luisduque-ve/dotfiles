{
  "drill_template": {
    "prefix": "drill_template",
    "body": [
      "\"\"\"",
      "Description:",
      "",
      "\"\"\"",
      "# Implementation foldin",
      "\"\"\"",
      "\"\"\"",
      "# foldout",
      "# Hints foldin",
      "# foldout",
      "# Mnemonic foldin",
      "# foldout",
      "class Exercise:",
      "    # TEST_CASES foldin",
      "    TEST_CASES = [",
      "        {\"name\": \"no args\", \"input\": (), \"expected_output\": \"\"},",
      "    ]",
      "    # foldout",
      "    def execute(self):",
      "        pass"
    ],
    "description": "Template for creating a new Exercise class"
  },
  "drill_debug": {
    "prefix": "drill_debug",
    "body": "print(Exercise().execute(*Exercise().TEST_CASES[0][\"input\"]))"
  },
  "from_import_": {
    "prefix": "fim",
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
  },
  "dictionary_comprehension_if_filter": {
    "prefix": "dci",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries, with conditional if statement."
  },
  "dictionary_comprehension": {
    "prefix": "dc",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries."
  },
  "debugpy": {
    "prefix": "debugpy",
    "body": [
      "# REMOVE ME",
      "import debugpy",
      "debugpy.listen((\"0.0.0.0\", 5678))",
      "debugpy.wait_for_client()"
    ],
    "description": "adds a debugpy remote attach breakpoint"
  },
  "generator_comprehension_if_filter": {
    "prefix": "gci",
    "body": "(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0",
    "description": "Create a generator based on existing iterables, with condition if statement."
  },
  "generator_comprehension": {
    "prefix": "gc",
    "body": "(${1:key} for ${2:value} in ${3:iterable})$0",
    "description": "Create a generator based on existing iterables."
  },
  "list_comprehension_if_else": {
    "prefix": "lcie",
    "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists, with conditional if-else statement."
  },
  "list_comprehension_if_filter": {
    "prefix": "lci",
    "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]",
    "description": "List comprehension for creating a list based on existing lists, with conditional if statement."
  },
  "list_comprehension": {
    "prefix": "lc",
    "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists."
  },
  "set_comprehension_if_filter": {
    "prefix": "sci",
    "body": "{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0",
    "description": "Create a set based on existing iterables, with condition if statement."
  },
  "set_comprehension": {
    "prefix": "sc",
    "body": "{${1:value} for ${2:value} in ${3:iterable}}$0",
    "description": "Create a set based on existing iterables."
  },
  "try_except_": {
    "prefix": "try",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "Code Snippet for a try and except blocks."
  },
  "try_except_else": {
    "prefix": "trye",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except with else statement."
  },
  "try_except_else_finally": {
    "prefix": "tryef",
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "Code Snippet for a try/except/finally with else statement."
  },
  "try_except_finally": {
    "prefix": "tryf",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except/finally."
  }
}
