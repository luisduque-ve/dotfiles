#+TITLE: My Dotfiles

This repository contains my personal dotfiles, managed using
[[https://www.chezmoi.io/][chezmoi]].

* Table of content :TOC_3:
- [[#ssh-init][SSH init]]
  - [[#per-machine-configuration][Per-Machine Configuration]]
    - [[#chezmoitoml-example][chezmoi.toml Example]]
- [[#fonts][Fonts]]
- [[#git][Git]]
- [[#zsh][ZSH]]
  - [[#core][Core]]
  - [[#node][Node]]
  - [[#python][Python]]
  - [[#extensions][Extensions]]
    - [[#zsh-syntax-highlighting][zsh-syntax-highlighting]]
    - [[#zsh-autosuggestions][zsh-autosuggestions]]
    - [[#zsh-abbr][zsh-abbr]]

* SSH init
#+begin_src bash
chezmoi init --apply git@github.com:luisduque-ve/dotfiles.git
#+end_src

** [[https://www.chezmoi.io/user-guide/manage-machine-to-machine-differences/#use-templates][Per-Machine Configuration]]
For each machine, you should have a unique
`~/.config/chezmoi/chezmoi.toml` file which contains machine-specific
values. This file is not tracked in the git repository for privacy and
security reasons.

*** chezmoi.toml Example
Here's an example of what your `chezmoi.toml` file might look like:

#+begin_src toml
[data]
ai_support = false
brew_path = "/opt/homebrew"
ca_certificate = ""
email = "email used by tools like git"
#+end_src

In this file, `email` is a custom variable that can be
used in your dotfiles templates.

* Fonts

I use DejaVuSansM Nerd Font for anything not coding related, and
FiraCode Nerd Font for anything else. Both fonts can be downloaded
[[https://www.nerdfonts.com/font-downloads][here]].

* Git
#+begin_src shell :tangle dot_gitconfig.tmpl
  [user]
    name = Luis Duque
    email = {{ .email | quote }}
  [core]
    editor = vim
  [merge]
    conflictstyle = diff3
  [diff]
    colorMoved = default
  [pull]
    rebase = false
  [push]
    autoSetupRemote = true
  [init]
    defaultBranch = main
  [alias]
    cb = checkout -b
    po = pull origin
    st = status
  [http]
    sslVerify = true
    {{- if .ca_certificate }}
    # remember to use \\ on windows
    sslcainfo = {{ .ca_certificate }}
    {{- end }}
  [rerere]
	  enabled = true
#+end_src

* ZSH

I really like fish shell but I find it not convenient in my workflow, as is not a
loggin shell, several GUI programs can has odd behaviours that is why
I have ZSH extension to emulate fish shell instead of use it.

** Core
This are my environment variables, nothing specific goes here for
example variables related to python, goes in the python section.
#+begin_src shell :tangle dot_zshrc.tmpl
export PATH="{{- .brew_path -}}/bin:$PATH"
export PATH="{{- .brew_path -}}/sbin:$PATH"
export EDITOR="nvim"
export VISUAL="nvim"
#+end_src

This enables using the default editor to edit commands with alt+v

#+begin_src shell :tangle dot_zshrc.tmpl
  autoload -Uz edit-command-line
  zle -N edit-command-line

  bindkey '^[v' edit-command-line
#+end_src

Start the ssh agent

#+begin_src shell :tangle dot_zshrc.tmpl
  eval "$(ssh-agent -s > /dev/null 2>&1)"
#+end_src

** Node
#+begin_src shell :tangle dot_zshrc.tmpl
  mkdir -p ~/.nvm
  export NVM_DIR="$HOME/.nvm"
  # This loads nvm
  [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && \. "$(brew --prefix)/opt/nvm/nvm.sh"
  # This loads nvm bash_completion
  [ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm"
#+end_src

** Python
This loads the pyenv config into .zshrc
#+begin_src shell :tangle dot_zshrc.tmpl
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
#+end_src

This is the same but tangles to the .zlogin file
#+begin_src shell :tangle dot_zlogin
  export PYENV_ROOT="$HOME/.pyenv"
  [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
#+end_src

Functions an variables

#+begin_src shell :tangle dot_zshrc.tmpl
  export PYDEVD_DISABLE_FILE_VALIDATION=1

  pysetup() {
    python -m pip install -r ~/.local/share/chezmoi/requirements.txt
  }
#+end_src

** Extensions
*** [[https://github.com/zsh-users/zsh-syntax-highlighting][zsh-syntax-highlighting]]
Fish like syntax highlight
#+begin_src shell :tangle dot_zshrc.tmpl
  source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#+end_src

*** [[https://github.com/zsh-users/zsh-autosuggestions][zsh-autosuggestions]]
Fish like autosuggestions for zsh
#+begin_src shell :tangle dot_zshrc.tmpl
  source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
  bindkey '^F' forward-word
#+end_src

*** [[https://github.com/olets/zsh-abbr][zsh-abbr]]
#+begin_src shell :tangle dot_zshrc.tmpl
  export ABBR_USER_ABBREVIATIONS_FILE=$HOME/.config/zsh-abbr/abbreviations
  source $(brew --prefix)/share/zsh-abbr/zsh-abbr.zsh
#+end_src

# ### PENDING TO INTEGRATE

# Enable starship
# eval "$(starship init zsh)"
