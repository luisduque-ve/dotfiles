#+TITLE: My Dotfiles

This repository contains my personal dotfiles, managed using
[[https://www.chezmoi.io/][chezmoi]].

* Table of content :TOC_3:
- [[#ssh-init][SSH init]]
  - [[#per-machine-configuration][Per-Machine Configuration]]
    - [[#chezmoitoml-example][chezmoi.toml Example]]
- [[#fonts][Fonts]]
- [[#git][Git]]
- [[#zsh][ZSH]]
  - [[#core][Core]]
  - [[#python][Python]]
  - [[#extensions][Extensions]]
    - [[#zsh-syntax-highlighting][zsh-syntax-highlighting]]
    - [[#zsh-autosuggestions][zsh-autosuggestions]]
    - [[#zsh-abbr][zsh-abbr]]
    - [[#zsh-vi-mode][zsh-vi-mode]]
    - [[#fzf][Fzf]]
    - [[#zoxide][Zoxide]]
    - [[#starship][Starship]]

* SSH init
#+begin_src bash
chezmoi init --apply git@github.com:luisduque-ve/dotfiles.git
#+end_src

** [[https://www.chezmoi.io/user-guide/manage-machine-to-machine-differences/#use-templates][Per-Machine Configuration]]
For each machine, you should have a unique
`~/.config/chezmoi/chezmoi.toml` file which contains machine-specific
values. This file is not tracked in the git repository for privacy and
security reasons.

*** chezmoi.toml Example
Here's an example of what your `chezmoi.toml` file might look like:

#+begin_src toml
[data]
ai_support = false
brew_path = "/opt/homebrew"
ca_certificate = ""
email = "email used by tools like git"
#+end_src

In this file, `email` is a custom variable that can be
used in your dotfiles templates.

* Fonts

I use DejaVuSansM Nerd Font for anything not coding related, and
FiraCode Nerd Font for anything else. Both fonts can be downloaded
[[https://www.nerdfonts.com/font-downloads][here]].

* Git
#+begin_src shell :tangle dot_gitconfig.tmpl
  [user]
    name = Luis Duque
    email = {{ .email | quote }}
  [core]
    editor = vim
  [merge]
    conflictstyle = diff3
  [diff]
    colorMoved = default
  [pull]
    rebase = false
  [push]
    autoSetupRemote = true
  [init]
    defaultBranch = main
  [alias]
    cb = checkout -b
    po = pull origin
    st = status
  [http]
    sslVerify = true
    {{- if .ca_certificate }}
    # remember to use \\ on windows
    sslcainfo = {{ .ca_certificate }}
    {{- end }}
  [rerere]
	  enabled = true
#+end_src

* ZSH

I really like fish shell but I find it not convenient in my workflow, as is not a
loggin shell, several GUI programs can has odd behaviours that is why
I have ZSH extension to emulate fish shell instead of use it.

** Core
This are my environment variables, nothing specific goes here for
example variables related to python, goes in the python section.
#+begin_src shell :tangle dot_zshrc.tmpl
  export PATH="{{- .brew_path -}}/bin:$PATH"
  export PATH="{{- .brew_path -}}/sbin:$PATH"
  export EDITOR="nvim"
  export VISUAL="nvim"
  export COLORTERM="truecolor"

  # This variables set the characters that makes a word
  # this affects the behaviour of plugins that use words as
  # base component, for example zsh-autosuggestions
  # if you modify this variable you can set what a word is
  #
  #
  # Original value was: *?_-.[]~=/&;!#$%^(){}<>
  export WORDCHARS="*?.[]~=&;!#$%^(){}<>"

  {{ if eq .chezmoi.os "linux" }}
  {{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
  # WSL-specific
  export REQUESTS_CA_BUNDLE='/etc/ssl/certs/ca-certificates.crt'
  export NODE_EXTRA_CA_CERTS='/etc/ssl/certs/ca-certificates.crt'
  export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
  {{   end }}
  {{ end }}
#+end_src

This enables using the default editor to edit commands with alt+v

#+begin_src shell :tangle dot_zshrc.tmpl
  autoload -Uz edit-command-line
  zle -N edit-command-line

  bindkey '^[v' edit-command-line
#+end_src

Start the ssh agent

#+begin_src shell :tangle dot_zshrc.tmpl
  eval "$(ssh-agent -s)"
#+end_src

These are my custom functions

#+begin_src shell :tangle dot_zshrc.tmpl
  a() {
    local query=$1
    local selected_dir

    if [[ -n $query ]]; then
      selected_dir=$(zoxide query -l | grep -i "$query" | fzf)
    else
      selected_dir=$(zoxide query -l | fzf)
    fi

    [[ -n $selected_dir ]] && cd "$selected_dir"
  }

  A() {
    local query=$1
    local selected_dir

    if [[ -n $query ]]; then
      selected_dir=$(zoxide query -l | grep -i "$query" | fzf)
    else
      selected_dir=$(zoxide query -l | fzf)
    fi

    if [[ -n $selected_dir ]]; then
      zoxide remove "$selected_dir"
      echo "Removed $selected_dir from zoxide history."
    else
      echo "No directory selected."
    fi
  }

  custom_cat() {
    if [[ $# -lt 2 ]]; then
      echo "Usage: custom_cat <file_extension> <recursive_flag>"
      return 1
    fi

    local ext=$1
    local recursive=$2
    local find_command

    if [[ $recursive == "true" ]]; then
      find_command="find . -name '*.$ext' -type f"
    else
      find_command="find . -maxdepth 1 -name '*.$ext' -type f"
    fi

    for file in $(eval "$find_command"); do
      echo "### $file"
      echo ""
      cat "$file"
      echo ""
    done
  }



  conflict_generator() {
    local folder_name="git-conflict-test"

    # Create/override the folder
    if [[ -d $folder_name ]]; then
      rm -rf "$folder_name"
    fi

    mkdir "$folder_name"
    cd "$folder_name" || return

    # Init a git repository
    git init

    # Create a file
    echo "Initial content" > dummy.txt
    git add dummy.txt
    git commit -m "Initial commit"

    # Create a new branch
    git branch conflict_branch

    # Modify the file in the master branch
    echo "Content added in master branch" >> dummy.txt
    git commit -am "Modify file in master branch"

    # Switch to the conflict branch and modify the file
    git checkout conflict_branch
    echo "Content added in conflict branch" >> dummy.txt
    git commit -am "Modify file in conflict branch"
    git checkout main
    git merge conflict_branch
    echo "Setup complete. There is a conflict in a current merge"
  }
#+end_src


** Python
# This loads the pyenv config into .zshrc
#+begin_src shell :tangle dot_zshrc.tmpl
  export PYENV_ROOT="$HOME/.pyenv"
  [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
#+end_src


Functions an variables

#+begin_src shell :tangle dot_zshrc.tmpl
  export PYDEVD_DISABLE_FILE_VALIDATION=1

  pysetup() {
    ## Install install all cross env requirements like debugpy
    python -m pip install -r ~/.local/share/chezmoi/requirements.txt
  }

  pyinit() {
    ## Enable auto enabling environments with .python-version file
    eval "$(pyenv virtualenv-init -)"
  }
#+end_src

** Extensions
*** [[https://github.com/zsh-users/zsh-syntax-highlighting][zsh-syntax-highlighting]]
Fish like syntax highlight
#+begin_src shell :tangle dot_zshrc.tmpl
  source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#+end_src

*** [[https://github.com/zsh-users/zsh-autosuggestions][zsh-autosuggestions]]
Fish like autosuggestions for zsh
#+begin_src shell :tangle dot_zshrc.tmpl
  source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
  bindkey '^F' forward-word
#+end_src

*** [[https://github.com/olets/zsh-abbr][zsh-abbr]]
#+begin_src shell :tangle dot_zshrc.tmpl
  export ABBR_USER_ABBREVIATIONS_FILE=$HOME/.config/zsh-abbr/abbreviations
  source $(brew --prefix)/share/zsh-abbr/zsh-abbr.zsh
#+end_src

*** [[https://github.com/jeffreytse/zsh-vi-mode][zsh-vi-mode]]
#+begin_src shell :tangle dot_zshrc.tmpl
  # this is a really awesome plugin but is currently breaking others
  # plugins mappings, I have it comment until the issue is resolved
  # https://github.com/jeffreytse/zsh-vi-mode/issues/303
  # uncomment the next line to re-enable it
  # source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
#+end_src

*** Fzf
#+begin_src shell :tangle dot_zshrc.tmpl
  export FZF_DEFAULT_OPTS="--color=bg:#fbf1c7,bg+:#ebdbb2,spinner:#458588,hl:#076678,fg:#3c3836,header:#3c3836,fg+:#3c3836,bg+:#d5c4a1,hl+:#076678"

  source <(fzf --zsh)
#+end_src

*** Zoxide
#+begin_src shell :tangle dot_zshrc.tmpl
  eval "$(zoxide init zsh)"
#+end_src

*** Starship
#+begin_src shell :tangle dot_zshrc.tmpl
  eval "$(starship init zsh)"
#+end_src
