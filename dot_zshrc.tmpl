export PATH="{{- .brew_path -}}/bin:$PATH"
export PATH="{{- .brew_path -}}/sbin:$PATH"
export EDITOR="nvim"
export VISUAL="nvim"
export COLORTERM="truecolor"

# This variables set the characters that makes a word
# this affects the behaviour of plugins that use words as
# base component, for example zsh-autosuggestions
# if you modify this variable you can set what a word is
#
#
# Original value was: *?_-.[]~=/&;!#$%^(){}<>
export WORDCHARS="*?.[]~=&;!#$%^(){}<>"

{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
# WSL-specific
export REQUESTS_CA_BUNDLE='/etc/ssl/certs/ca-certificates.crt'
export NODE_EXTRA_CA_CERTS='/etc/ssl/certs/ca-certificates.crt'
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
{{   end }}
{{ end }}

autoload -Uz edit-command-line
zle -N edit-command-line

bindkey '^[v' edit-command-line

eval "$(ssh-agent -s)"

a() {
  local query=$1
  local selected_dir

  if [[ -n $query ]]; then
    selected_dir=$(zoxide query -l | grep -i "$query" | fzf)
  else
    selected_dir=$(zoxide query -l | fzf)
  fi

  [[ -n $selected_dir ]] && cd "$selected_dir"
}

A() {
  local query=$1
  local selected_dir

  if [[ -n $query ]]; then
    selected_dir=$(zoxide query -l | grep -i "$query" | fzf)
  else
    selected_dir=$(zoxide query -l | fzf)
  fi

  if [[ -n $selected_dir ]]; then
    zoxide remove "$selected_dir"
    echo "Removed $selected_dir from zoxide history."
  else
    echo "No directory selected."
  fi
}

custom_cat() {
  if [[ $# -lt 2 ]]; then
    echo "Usage: custom_cat <file_extension> <recursive_flag>"
    return 1
  fi

  local ext=$1
  local recursive=$2
  local find_command

  if [[ $recursive == "true" ]]; then
    find_command="find . -name '*.$ext' -type f"
  else
    find_command="find . -maxdepth 1 -name '*.$ext' -type f"
  fi

  for file in $(eval "$find_command"); do
    echo "### $file"
    echo ""
    cat "$file"
    echo ""
  done
}



conflict_generator() {
  local folder_name="git-conflict-test"

  # Create/override the folder
  if [[ -d $folder_name ]]; then
    rm -rf "$folder_name"
  fi

  mkdir "$folder_name"
  cd "$folder_name" || return

  # Init a git repository
  git init

  # Create a file with initial content
  cat <<EOF > dummy.txt
def example_function():
    print("Initial content")
EOF
  git add dummy.txt
  git commit -m "Initial commit"

  # Create a new branch
  git branch conflict_branch

  # Modify the file in the main branch
  cat <<EOF > dummy.txt
def example_function():
    print("Initial content")
    print("Content added in main branch")
EOF
  git commit -am "Modify file in main branch"

  # Switch to the conflict branch and modify the file with indentation changes
  git checkout conflict_branch
  cat <<EOF > dummy.txt
def example_function():
    def nested():
	print("Initial content")
	print("Content added in conflict branch")
    return nested()
EOF
  git commit -am "Modify file in conflict branch"

  # Switch back to the main branch and merge, creating a conflict
  git checkout main
  git merge conflict_branch || echo "Setup complete. There is a conflict in the current merge"
}

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

export PYDEVD_DISABLE_FILE_VALIDATION=1

pysetup() {
  ## Install install all cross env requirements like debugpy
  python -m pip install -r ~/.local/share/chezmoi/requirements.txt
}

pyinit() {
  ## Enable auto enabling environments with .python-version file
  eval "$(pyenv virtualenv-init -)"
}

source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
bindkey '^F' forward-word

export ABBR_USER_ABBREVIATIONS_FILE=$HOME/.config/zsh-abbr/abbreviations
source $(brew --prefix)/share/zsh-abbr/zsh-abbr.zsh

# this is a really awesome plugin but is currently breaking others
# plugins mappings, I have it comment until the issue is resolved
# https://github.com/jeffreytse/zsh-vi-mode/issues/303
# uncomment the next line to re-enable it
# source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh

export FZF_DEFAULT_OPTS="--color=bg:#fbf1c7,bg+:#ebdbb2,spinner:#458588,hl:#076678,fg:#3c3836,header:#3c3836,fg+:#3c3836,bg+:#d5c4a1,hl+:#076678"

source <(fzf --zsh)

eval "$(zoxide init zsh)"

eval "$(starship init zsh)"
