#+PROPERTY: header-args :tangle init.el.tmpl
#+TITLE: Emacs config

Since this is tracked by Chezmoi, you don't need to modify this file
on fresh installs.

To regenerate the init.el file, simply go to the top of this file
(inside Emacs, of course) and press C-c C-c. After that, run
org-babel-tangle.

* Table of content :TOC:
- [[#core][Core]]
  - [[#advice-functions][Advice functions]]
  - [[#custom-file-creation-or-loading][Custom file creation or loading]]
  - [[#use-package-setup][Use package setup]]
  - [[#ui][UI]]
- [[#org][Org]]
  - [[#org-anki][Org Anki]]
  - [[#toc-org][toc-org]]
  - [[#prettify][Prettify]]
- [[#git][Git]]
  - [[#magit][Magit]]
- [[#completion-system][Completion System]]
  - [[#vertico][Vertico]]
  - [[#savehist][Savehist]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
- [[#perspective][Perspective]]
- [[#exec-path-from-shell][Exec Path from shell]]
- [[#python][Python]]
- [[#emacs-reformatter][Emacs Reformatter]]
- [[#treemacs][Treemacs]]
- [[#dirvish][Dirvish]]
- [[#vterm][Vterm]]
- [[#undotree][Undotree]]
- [[#evil][Evil]]

* Core
** Advice functions
#+begin_src elisp
(defun recenter-advice (&rest _args)
  "Advice to recenter the screen this only calls recenter
  I use this to use in advice implementations in a clear way,
  is used in several functions evil and not evil"
  (recenter))
#+end_src
*** Advice implementations
#+begin_src elisp
(advice-add 'isearch-repeat-forward :after #'recenter-advice)
(advice-add 'isearch-repeat-backward :after #'recenter-advice)
#+end_src
** Custom file creation or loading

#+BEGIN_SRC elisp
(setq custom-file "~/.emacs.d/custom.el")

(unless (file-exists-p custom-file)
  (with-temp-buffer (write-file custom-file)))

(load custom-file)

#+END_SRC

#+begin_src elisp
  (when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))
#+end_src
** Use package setup
Keep this at the very top

#+BEGIN_SRC elisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

** UI

#+begin_src elisp
  (setq ring-bell-function 'ignore)
#+end_src

#+begin_src elisp
  (use-package all-the-icons
  :if (display-graphic-p))
#+end_src

#+BEGIN_SRC elisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox-light t)

  (doom-themes-org-config))
#+END_SRC


#+BEGIN_SRC elisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC

I use the following function to get the font size depending on which
device I am. Usually if I'm in a WSL instance I'm in a bigger screen.


#+BEGIN_SRC elisp
(defun my/get-font-size ()
  "Return 140 if in a WSL environment, otherwise 170."
  (if (getenv "WSL_DISTRO_NAME")
      140
    180))
#+END_SRC

#+BEGIN_SRC elisp
  (global-display-fill-column-indicator-mode)
  (global-hl-line-mode 1)
  (set-face-attribute 'default nil
		      :font "FiraCode Nerd Font Mono"
		      :height (my/get-font-size))
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (setq org-directory "~/org/")

  ;; Disable the splash screen and open a scratch buffer
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)

  ;; Remove GUI elements always, even in terminal
  (scroll-bar-mode -1)     ;; Disable the scroll bar
  (tool-bar-mode -1)       ;; Disable the tool bar
  (menu-bar-mode -1)       ;; Disable the menu bar
  (setq use-file-dialog nil)    ;; Disable the file dialog
  (setq use-dialog-box nil)     ;; Disable dialog boxes
  (setq inhibit-startup-buffer-menu t) ;; Disable buffer menu at startup

  ;; Suppress warnings at startup
  (setq warning-minimum-level :error)
  (setq inhibit-startup-warnings t)

#+END_SRC

*YOU CAN REMOVE THIS ON EMACS 30*, which-key is now included in the master branch of Emacs and will likely be released with Emacs v30

#+BEGIN_SRC elisp
(use-package which-key
  :config
  (setq which-key-idle-delay 0.1)
  (which-key-mode))
#+END_SRC

#+begin_src elisp
  (use-package pdf-tools
    :config (pdf-tools-install))
  (use-package saveplace-pdf-view
    :config (save-place-mode 1))
#+end_src

* Org

Core org mode configs
#+BEGIN_SRC elisp
(setq org-todo-keywords
    '((sequence "TODO" "IN PROGRESS" "DONE")))

(setq org-todo-keyword-faces
    '(("TODO" . org-warning)
	("IN PROGRESS" . "green")  ;; Bright Yellow for IN PROGRESS
	("DONE" . "gray")))

  (setq org-hide-emphasis-markers t)
#+END_SRC

** Org Anki

#+BEGIN_SRC elisp
(use-package org-anki)
#+END_SRC

** toc-org
Automatically create table of content

#+BEGIN_SRC elisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+END_SRC

** Prettify
#+BEGIN_SRC elisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+END_SRC

* Git

** Magit
#+BEGIN_SRC elisp
  (use-package magit
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package magit-todos
    :config (magit-todos-mode 1))
#+END_SRC

* Completion System
** Vertico
#+BEGIN_SRC elisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC

** Savehist
Persist vertigo history
#+BEGIN_SRC elisp
(use-package savehist
  :init
  (savehist-mode))
#+END_SRC

** Orderless
Persist vertigo history
#+BEGIN_SRC elisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** Marginalia
#+BEGIN_SRC elisp
(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))
#+END_SRC

** Consult
#+BEGIN_SRC elisp
  (use-package consult)
#+END_SRC

* Perspective

This enables support for different workspaces

#+begin_src elisp
  (use-package perspective
  :init
    (setq persp-suppress-no-prefix-key-warning t)
  (persp-mode))
#+end_src



* Exec Path from shell
Without this emacs has a lot of issues finding commands when
launched from outside a shell

#+begin_src elisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+end_src

* Python

#+begin_src elisp
  (use-package pyenv-mode
    :config
    (pyenv-mode))
#+end_src


* Emacs Reformatter
#+begin_src elisp
  (use-package reformatter
  :hook ((python-mode . darker-reformat-on-save-mode))
  :config
  (reformatter-define darker-reformat
    :program "darker"
    :stdin nil
    :stdout nil
    :args (list "-q" input-file)))
#+end_src

* Treemacs
#+begin_src elisp
      (use-package treemacs)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once))

    (use-package treemacs-magit
      :after (treemacs magit))

#+end_src

* Dirvish

#+begin_src elisp
  (use-package dirvish
  :init (dirvish-override-dired-mode))
#+end_src

* Vterm

#+begin_src elisp :eval no
  (use-package vterm
  :init (setq vterm-shell "{{- .brew_path -}}/bin/fish")
  :hook
  (vterm-mode . (lambda ()
                  (display-line-numbers-mode 0) ;; Disable line numbers
                  (setq fill-column nil)))      ;; Disable fill-column
  )
  (use-package multi-vterm)
#+end_src

* Undotree
#+begin_src elisp
  (use-package vundo)
#+end_src

* Evil
#+begin_src elisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)

    ;; Evil advices
    (advice-add 'evil-search-next :after #'recenter-advice)
    (advice-add 'evil-scroll-down :after #'recenter-advice)
    (advice-add 'evil-scroll-up :after #'recenter-advice)
    (advice-add 'evil-search-previous :after #'recenter-advice)
    (advice-add 'evil-goto-line :after #'recenter-advice)

    :config
    (evil-mode 1)
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit))

#+end_src
