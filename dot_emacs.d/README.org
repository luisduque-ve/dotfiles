#+PROPERTY: header-args :tangle init.el
#+TITLE: Emacs config

This is my personal Emacs configuration. I try to keep it simple while using as
much of evil-mode as possible.

Since this is tracked by Chezmoi, you don't need to modify this file on fresh
installs.

To regenerate the init.el file, simply go to the top of this file (inside
Emacs, of course) and press C-c C-c. After that, run org-babel-tangle.

* Table of content :TOC:
- [[#core][Core]]
  - [[#custom-file-creation-or-loading][Custom file creation or loading]]
  - [[#use-package-setup][Use package setup]]
  - [[#ui][UI]]
- [[#general][General]]
- [[#evil][Evil]]
  - [[#evil-quick-scope][Evil Quick Scope]]
  - [[#evil-org][Evil Org]]
  - [[#evil-collection][Evil collection]]
  - [[#keymaps][Keymaps]]
- [[#org][Org]]
  - [[#org-anki][Org Anki]]
  - [[#toc-org][toc-org]]
  - [[#prettify][Prettify]]
- [[#git][Git]]

* Core
** Custom file creation or loading

#+BEGIN_SRC elisp
(setq custom-file "~/.emacs.d/custom.el")

(unless (file-exists-p custom-file)
  (with-temp-buffer (write-file custom-file)))

(load custom-file)

#+END_SRC

** Use package setup
Keep this at the very top

#+BEGIN_SRC elisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

** UI

#+BEGIN_SRC elisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox-light t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC elisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC

I use the following function to get the font size depending on which
device I am. Usually if I'm in a WSL instance I'm in a bigger screen.


#+BEGIN_SRC elisp
(defun my/get-font-size ()
  "Return 140 if in a WSL environment, otherwise 170."
  (if (getenv "WSL_DISTRO_NAME")
      140
    170))
#+END_SRC

#+BEGIN_SRC elisp
(set-face-attribute 'default nil
                    :font "FiraCode Nerd Font Mono"
                    :height (my/get-font-size)
                    :weight 'semi-bold)
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
(setq org-directory "~/org/")

;; Disable the splash screen and open a scratch buffer
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)

;; Remove GUI elements always, even in terminal
(scroll-bar-mode -1)     ;; Disable the scroll bar
(tool-bar-mode -1)       ;; Disable the tool bar
(menu-bar-mode -1)       ;; Disable the menu bar
(setq use-file-dialog nil)    ;; Disable the file dialog
(setq use-dialog-box nil)     ;; Disable dialog boxes
(setq inhibit-startup-buffer-menu t) ;; Disable buffer menu at startup

;; Suppress warnings at startup
(setq warning-minimum-level :error)
(setq inhibit-startup-warnings t)

#+END_SRC

*YOU CAN REMOVE THIS ON EMACS 30*, which-key is now included in the master branch of Emacs and will likely be released with Emacs v30

#+BEGIN_SRC elisp
(use-package which-key
  :config
  (setq which-key-idle-delay 0.1)
  (which-key-mode))
#+END_SRC

* General

#+BEGIN_SRC elisp
(use-package general
  :after (evil which-key)
  :config
  (general-evil-setup t)
  (general-create-definer my-leader-def
    :keymaps '(normal visual)
    :prefix "SPC"))
#+END_SRC


* Evil

#+BEGIN_SRC elisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    ;; Define key mappings to include recentering
  (evil-define-key 'normal 'global
    (kbd "C-d") (lambda () (interactive) (evil-scroll-down nil) (recenter))
    (kbd "C-u") (lambda () (interactive) (evil-scroll-up nil) (recenter))
    (kbd "n") (lambda () (interactive) (evil-search-next) (recenter))
    (kbd "N") (lambda () (interactive) (evil-search-previous) (recenter))
    (kbd "G") (lambda () (interactive) (evil-goto-line) (recenter))))
#+END_SRC

** Evil Quick Scope

#+BEGIN_SRC elisp
(use-package evil-quickscope
  :after evil
  :config
  (global-evil-quickscope-always-mode 1))
#+END_SRC

** Evil Org

#+BEGIN_SRC elisp
(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

** Evil collection

#+BEGIN_SRC elisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

** Keymaps

#+BEGIN_SRC elisp
  (my-leader-def
    "b"  '(:ignore t :which-key "buffer")
    "bd" '(evil-delete-buffer :which-key "close"))
#+END_SRC


* Org

** Org Anki

#+BEGIN_SRC elisp
(use-package org-anki)
#+END_SRC

** toc-org
Automatically create table of content

#+BEGIN_SRC elisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+END_SRC

** Prettify
#+BEGIN_SRC elisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+END_SRC

* Git

#+BEGIN_SRC elisp
  (use-package magit
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package magit-todos
    :config (magit-todos-mode 1))

  (my-leader-def
    "g" '(magit-status :which-key "magit"))
#+END_SRC
